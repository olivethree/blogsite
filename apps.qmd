---
title: "Tools"
editor: visual
---

# [Brief Reverse Correlation Task](https://github.com/olivethree/briefRC) 

Run the Brief Reverse Correlation Task locally in your browser (no internet required).

## Setting up the experiment

These instructions outline how to set up and run the Brief Reverse Correlation task developed by Schmitz et al. (2024) on your local machine.

**1. Create a project folder:**

Begin by creating a new folder on your computer to house the task files. Choose a descriptive name for this folder (e.g., `Brief_RC_Task`, `BRC_Experiment`, or similar). This will help keep your files organized.

**2. Download files from GitHub:**

Navigate to the GitHub repository \[insert GitHub repository link here\]. You will need to download the following:

-   **HTML File:** Download the HTML file that contains the application code. This file will likely have a name similar to `index.html`, `task.html`, or a name indicating the specific task.

-   **`images` Folder:** Download the entire `images` folder, including all its contents (the image files used in the task). *It is crucial to maintain the folder structure; do not just download the images individually.*

**3. Project structure:**

Place the downloaded HTML file and the `images` folder (with its contents) directly into the project folder you created in Step 1. The structure should look like this:

```         
Brief_RC_Task/       (Your project folder)
├── index.html      (Example HTML filename, but can be for example demo_briefrc_12.ENG.html)
└── images/         (The images folder, do not change the name of this folder)
    ├── *.png       (filenames follow a strict format like for example faceOri<number>.png)
    ├── *.png
    └── ...          (Other image files)
```

**4. Adjust experiment content to your needs:**

You can adjust the informed consent, task instructions, and trial instruction (very important as this is the target category you are interested in, e.g. Select the face that looks like \<YOUR_CATEGORY_OF_INTEREST\>).

To adjust these instructions, you can simply edit the content of the HTML file by opening it in your favorite IDE (e.g. [Visual Code](https://code.visualstudio.com/), [Notepad++,](https://notepad-plus-plus.org/) Xcode, etc.) or text editor, and look for the text. In case you get lost, you can ask ChatGPT or similar chatbots for guidance on where to find this content (or even change it in a more efficient way through prompt engineering if you know what you're doing...just remember to be critical of the output of generative AI, always verify!).

**5. Run the experiment**

Open the HTML file (e.g., `index.html`) in your preferred web browser (e.g., Chrome, Firefox, Safari, Edge). The experiment should now load and be ready to use.

**6. Results:**

Upon completion of a session, the results will be automatically saved to your browser's default downloads folder (typically named "Downloads").

## References

-   Schmitz, M., Rougier, M., & Yzerbyt, V. (2024). Introducing the brief reverse correlation: An improved tool to assess visual representations. *European Journal of Social Psychology*. Advance Online Publication. [**https://doi.org/10.1002/ejsp.3100**](https://doi.org/10.1002/ejsp.3100)

# [Shiny Reverse Correlation: Sampling Subgroup CIs](https://olivethree.shinyapps.io/shinyRC_subgroup_cis/)

This shiny app facilitates the generation of the so-called 'subgroup' classification images (CIs) for a two-phase reverse correlation methodology.

Read the post at [Blog](https://manueloliveira.nl/posts/p_2/) or [Medium](https://medium.com/@manueljbo/improved-two-phase-reverse-correlation-method-in-psychological-research-overview-and-r-tutorial-dfb66f95553c)

The use of subgroup CIs is a currently recommended practice in psychological research involving a two-phase variant of the psychophysical reverse correlation method (e.g. [Dotsch & Todorov, 2012](https://journals.sagepub.com/doi/abs/10.1177/1948550611430272)). In practice, this implies using the data collected during the first phase (reverse correlation task) to generate multiple group-level CIs associated with the same target construct condition (i.e. several 'Trustworthy' subgroup CIs vs. single 'Trustworthy' group CI ). These are then rated in the second phase by another group of raters.

Using subgroup CIs helps decrease the number of images to rate in the second phase, compared to the alternative but more time consuming option of rating all the individual CIs generated by each participant in the first phase. This approach circumvents the issues (e.g. type I error inflation) associated with using a single group CI in the second phase (see [Cone et al., 2021](https://journals.sagepub.com/doi/10.1177/1948550620938616)).

For more details see: <https://github.com/olivethree/shinyrc_subgroupcis>

## 

# [Face Masker](https://github.com/olivethree/webcam_face_masker){#face-masker}

**Real-time webcam face masking**

This application applies a facial mask to any faces captured by the webcam. You can also take snapshots and store them in jpeg format. It was developed during my free time as a hobby project, years before AI chatbots could do this for me in 5 seconds. I leave it up to you to decide how useful this app/code may be to you. The app is quite limited and I stopped working on it a long time ago, but maybe it can inspire you to start something better :)

**Running the app**: For now, the only way to run the Face Masker app is from source code "\~/src/**facemasker_main.py**" script.

[Download Face Masker source code](https://github.com/olivethree/webcam_face_masker/archive/refs/heads/master.zip)
