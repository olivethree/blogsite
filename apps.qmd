---
title: "Applications"
editor: visual
---

## [Shiny Reverse Correlation: Sampling Subgroup CIs](https://olivethree.shinyapps.io/shinyRC_subgroup_cis/)

This shiny app facilitates the generation of the so-called 'subgroup' classification images (CIs) for a two-phase reverse correlation methodology.

Read the associated [Medium blogpost](https://medium.com/@manueljbo/improving-reverse-correlation-methods-what-are-subgroup-cis-and-how-to-generate-them-85e4732b48f2)

The use of subgroup CIs is a currently recommended practice in psychological research involving a two-phase variant of the psychophysical reverse correlation method (e.g. [Dotsch & Todorov, 2012](https://journals.sagepub.com/doi/abs/10.1177/1948550611430272)). In practice, this implies using the data collected during the first phase (reverse correlation task) to generate multiple group-level CIs associated with the same target construct condition (i.e. the subgroup CIs) for the second phase where these are rated by another group of raters. This approach circumvents the issues (e.g. type I error inflation) associated with using a single group CI for a given traget construct in the second phase (see [Cone et al., 2021](https://journals.sagepub.com/doi/10.1177/1948550620938616)).

Check out the associated Medium blogpost:

For more details see: <https://github.com/olivethree/shinyrc_subgroupcis>

------------------------------------------------------------------------

## [Random File Sampler](https://github.com/olivethree/randomfilesampler)

I wrote this program with the goal of automating the random sampling of face images from databases. This is useful to anyone looking to prevent any bias in image file selection. This program randomly samples (without replacement) files of any given extension from a folder. The sampled files are then copied to a new folder together with a .txt file listing the sampled file names. For reproducibility, the program uses a fixed pseudo-random generator seed number (seed=1234). Alternatively, you can set your own custom seed number. In the last updates, I added a user-friendly interface and created a Windows installer for the application.

**For Windows users**:

[Download Random File Sampler (Windows Installer, 18.7 MB)](https://github.com/olivethree/randomfilesampler/releases/download/1.0.1/Install_RandomFileSampler_v1.0.exe)

**For Mac OS users (source code only)**:

[Download Random File Sampler source code (18.2 MB)](https://github.com/olivethree/randomfilesampler/archive/refs/tags/1.0.1.zip)

------------------------------------------------------------------------

# [Face Masker](https://github.com/olivethree/webcam_face_masker){#face-masker}

**Real-time webcam face masking**

This application applies a facial mask to any faces captured by the webcam. In addition, it includes a "Save snapshot" feature that captures the current frame and saves it as a JPEG file. It was developed during my free time as a hobby project. There are some limitations in version 1.0 that need improvement, especially the "laggy" frame rate.

**Running the app**: For now, the only way to run the Face Masker app is from source code "\~/src/**facemasker_main.py**" script.

[Download Face Masker source code](https://github.com/olivethree/webcam_face_masker/archive/refs/heads/master.zip)
